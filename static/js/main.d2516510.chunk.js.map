{"version":3,"sources":["enums/index.ts","components/grid/grid.tsx","components/stage/stagecontrols.tsx","constants/index.ts","helper/nodehelper.ts","components/grid/nodedescriptor.tsx","components/stage/stage.tsx","App.tsx","index.tsx"],"names":["NodeType","Grid","props","startNode","destinationNode","enums","Start","isStartNode","Destination","row","column","isDestinationNode","getNodes","count","nodes","i","identifier","isStart","isDestination","push","id","key","draggable","className","classNames","start","destination","onDragStart","onDragEnd","onNodeDropEnd","onDragOver","e","preventDefault","getRow","numberOfRows","numberOfNodes","rows","rowId","generateGrid","rowCount","columnCount","StageControls","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","href","role","aria-haspopup","aria-labelledby","NodeClass","node","path","brick","visited","NodeHelper","element","classList","contains","constants","None","nodeType","NodeDescriptor","getDescripor","text","cssClass","Stage","numberOfColumns","draggedNodeType","target","isNode","getNodeType","getNodeClass","remove","setAttribute","x","clientX","y","clientY","currentElement","document","elementFromPoint","add","this","React","Component","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d2516510.chunk.js","sourcesContent":["/**\r\n * Enums for different nodes\r\n */\r\nexport enum NodeType {\r\n  None = 0,\r\n  Start = 1,\r\n  Destination = 2,\r\n  Path = 3,\r\n  UnVisited = 4,\r\n  Visited = 5,\r\n  Brick = 6,\r\n}\r\n","import React from \"react\";\r\nimport Node from \"./typings/node\";\r\nimport classNames from \"classnames\";\r\nimport * as enums from \"../../enums\";\r\n\r\ninterface Props {\r\n  id: string;\r\n  rowCount: number;\r\n  columnCount: number;\r\n  onDragStart: (event: React.DragEvent<HTMLDivElement>) => void;\r\n  onNodeDropEnd: (event: React.DragEvent<HTMLDivElement>) => void;\r\n}\r\n\r\nconst Grid: React.FunctionComponent<Props> = (props) => {\r\n  // start node in grid\r\n  const startNode: Node = {\r\n    row: 10,\r\n    column: 11,\r\n    type: enums.NodeType.Start,\r\n  };\r\n\r\n  // destination node in grid\r\n  const destinationNode: Node = {\r\n    row: 10,\r\n    column: 40,\r\n    type: enums.NodeType.Destination,\r\n  };\r\n\r\n  // return true if node is start node\r\n  const isStartNode = (row: number, column: number) => {\r\n    return row === startNode.row && column === startNode.column;\r\n  };\r\n\r\n  // return true if node is destination node\r\n  const isDestinationNode = (row: number, column: number) => {\r\n    return row === destinationNode.row && column === destinationNode.column;\r\n  };\r\n\r\n  /**\r\n   * return array of nodes for a row\r\n   */\r\n  const getNodes = (row: number, count: number) => {\r\n    let nodes: JSX.Element[] = [];\r\n\r\n    for (let i = 1; i <= count; i++) {\r\n      let identifier = `node-${row}-${i}`;\r\n      let isStart = isStartNode(row, i);\r\n      let isDestination = isDestinationNode(row, i);\r\n\r\n      nodes.push(\r\n        <div\r\n          id={identifier}\r\n          key={identifier}\r\n          draggable={isStart || isDestination}\r\n          className={classNames(\r\n            \"node\",\r\n            { start: isStart },\r\n            { destination: isDestination }\r\n          )}\r\n          onDragStart={props.onDragStart}\r\n          onDragEnd={props.onNodeDropEnd}\r\n          onDragOver={(e) => {\r\n            e.preventDefault();\r\n          }}\r\n        ></div>\r\n      );\r\n    }\r\n\r\n    return nodes;\r\n  };\r\n\r\n  /**\r\n   * return row of grid\r\n   */\r\n  const getRow = (id: string, nodes: JSX.Element[]) => {\r\n    return (\r\n      <div id={id} key={id} className=\"row\">\r\n        {[nodes]}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * generate grid\r\n   */\r\n  const generateGrid = (numberOfRows: number, numberOfNodes: number) => {\r\n    let rows: JSX.Element[] = [];\r\n\r\n    for (let i = 1; i <= numberOfRows; i++) {\r\n      let nodes = getNodes(i, numberOfNodes);\r\n      let rowId = `row-${i}`;\r\n      let row = getRow(rowId, nodes);\r\n      rows.push(row);\r\n    }\r\n\r\n    return rows;\r\n  };\r\n\r\n  return (\r\n    <div id={props.id} className=\"node-container\">\r\n      {generateGrid(props.rowCount, props.columnCount)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\n\r\nconst StageControls: React.FunctionComponent = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n      <span className=\"navbar-brand title\">Path finding algorithm</span>\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarSupportedContent\"\r\n        aria-controls=\"navbarSupportedContent\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav mr-auto\">\r\n          <li className=\"nav-item dropdown active\">\r\n            <a\r\n              className=\"nav-link dropdown-toggle\"\r\n              href=\"#\"\r\n              id=\"navbarDropdown\"\r\n              role=\"button\"\r\n              data-toggle=\"dropdown\"\r\n              aria-haspopup=\"true\"\r\n              aria-expanded=\"false\"\r\n            >\r\n              Dijkstra's\r\n            </a>\r\n            <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n              <a className=\"dropdown-item\" href=\"#\">\r\n                Dijkstra's\r\n              </a>\r\n            </div>\r\n          </li>\r\n          <li className=\"nav-item dropdown\">\r\n            &nbsp;&nbsp;&nbsp;&nbsp;\r\n            <button className=\"btn btn-success\">Visualize</button>\r\n          </li>\r\n          <li className=\"nav-item dropdown\">\r\n            &nbsp;&nbsp;&nbsp;&nbsp;\r\n            <button className=\"btn btn-warning\">Reset board</button>\r\n          </li>\r\n          <li className=\"range\">\r\n            <p>Visualizing speed</p>\r\n            <input type=\"range\" />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default StageControls;\r\n","let NodeClass = {\r\n  start: \"start\",\r\n  destination: \"destination\",\r\n  node: \"node\",\r\n  path: \"path\",\r\n  brick: \"brick\",\r\n  visited: \"visited\",\r\n};\r\n\r\nexport { NodeClass };\r\n","import * as enums from \"../enums\";\r\nimport * as constants from \"../constants\";\r\n\r\nclass NodeHelper {\r\n  /**\r\n   * return true if element has destination class\r\n   * @param element element\r\n   */\r\n  public static isDestinationNode(element: Element) {\r\n    return element.classList.contains(constants.NodeClass.destination);\r\n  }\r\n\r\n  /**\r\n   * return true if element has start class\r\n   * @param element element\r\n   */\r\n  public static isStartNode(element: Element) {\r\n    return element.classList.contains(constants.NodeClass.start);\r\n  }\r\n\r\n  /**\r\n   * return true if element has node class\r\n   * @param element element\r\n   */\r\n  public static isNode(element: Element) {\r\n    return element.classList.contains(constants.NodeClass.node);\r\n  }\r\n\r\n  /**\r\n   * return node type of element\r\n   * @param element  element\r\n   */\r\n  public static getNodeType(element: Element) {\r\n    let type = enums.NodeType.None;\r\n\r\n    if (element) {\r\n      let classList = element.classList;\r\n\r\n      if (classList.contains(constants.NodeClass.start)) {\r\n        type = enums.NodeType.Start;\r\n      } else if (classList.contains(constants.NodeClass.destination)) {\r\n        type = enums.NodeType.Destination;\r\n      }\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  /**\r\n   * return css class for a node\r\n   * @param nodeType node type\r\n   */\r\n  public static getNodeClass(nodeType: enums.NodeType) {\r\n    let className = \"\";\r\n\r\n    switch (nodeType) {\r\n      case enums.NodeType.Start:\r\n        className = constants.NodeClass.start;\r\n        break;\r\n      case enums.NodeType.Destination:\r\n        className = constants.NodeClass.destination;\r\n        break;\r\n    }\r\n\r\n    return className;\r\n  }\r\n}\r\n\r\nexport default NodeHelper;\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport * as constants from \"../../constants\";\r\n\r\nconst NodeDescriptor: React.FunctionComponent = () => {\r\n  /**\r\n   * get node descriptor\r\n   * @param id id of descriptor\r\n   * @param text text to display\r\n   * @param classNames classnames to add\r\n   */\r\n  const getDescripor = (id: string, text: string, classNames: string) => {\r\n    return (\r\n      <div id={id} className=\"descriptor\">\r\n        <div className={classNames} />\r\n        &nbsp;\r\n        <span>{text}</span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const cssClass = constants.NodeClass;\r\n\r\n  return (\r\n    <div className=\"grid-descriptor\">\r\n      {getDescripor(\r\n        \"startNode\",\r\n        \"Start Node\",\r\n        classNames(cssClass.node, cssClass.start)\r\n      )}\r\n      {getDescripor(\r\n        \"destinationNode\",\r\n        \"Destination Node\",\r\n        classNames(cssClass.node, cssClass.destination)\r\n      )}\r\n      {getDescripor(\r\n        \"pathNode\",\r\n        \"Path Node\",\r\n        classNames(cssClass.node, cssClass.path)\r\n      )}\r\n      {getDescripor(\r\n        \"unvisitedNode\",\r\n        \"Unvisited Node\",\r\n        classNames(cssClass.node)\r\n      )}\r\n      {getDescripor(\r\n        \"visitedNode\",\r\n        \"Visited Node\",\r\n        classNames(cssClass.node, cssClass.visited)\r\n      )}\r\n      {getDescripor(\r\n        \"brickNode\",\r\n        \"Brick Node\",\r\n        classNames(cssClass.node, cssClass.brick)\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NodeDescriptor;\r\n","import React from \"react\";\r\nimport Grid from \"../grid/grid\";\r\nimport * as enums from \"../../enums\";\r\nimport StageControls from \"./stagecontrols\";\r\nimport NodeHelper from \"../../helper/nodehelper\";\r\nimport NodeDescriptor from \"../grid/nodedescriptor\";\r\n\r\ninterface State {\r\n  renderedOn: number;\r\n}\r\n\r\ninterface Props {}\r\n\r\nclass Stage extends React.Component<Props, State> {\r\n  // number of rows in grid\r\n  private numberOfRows = 20;\r\n\r\n  // number of columns in a row\r\n  private numberOfColumns = 50;\r\n\r\n  // holds currently dragged node type\r\n  private draggedNodeType = enums.NodeType.None;\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"stage\">\r\n        <StageControls />\r\n        <NodeDescriptor />\r\n        <Grid\r\n          id=\"grid\"\r\n          rowCount={this.numberOfRows}\r\n          columnCount={this.numberOfColumns}\r\n          onDragStart={this.onDragStart}\r\n          onNodeDropEnd={this.onNodeDropEnd}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * triggered when a node is dragged\r\n   */\r\n  private onDragStart = (e: React.DragEvent<HTMLDivElement>) => {\r\n    let target: any = e.target;\r\n    if (\r\n      NodeHelper.isNode(target) &&\r\n      (NodeHelper.isStartNode(target) || NodeHelper.isDestinationNode(target))\r\n    ) {\r\n      let nodeType = NodeHelper.getNodeType(target);\r\n      this.draggedNodeType = nodeType;\r\n\r\n      let cssClass = NodeHelper.getNodeClass(nodeType);\r\n      target.classList.remove(cssClass);\r\n      target.setAttribute(\"draggable\", \"false\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * triggered when node drop\r\n   */\r\n  private onNodeDropEnd = (e: React.DragEvent<HTMLDivElement>) => {\r\n    let element: any = e.target;\r\n    let x = e.clientX;\r\n    let y = e.clientY;\r\n    let currentElement = document.elementFromPoint(x, y);\r\n    let cssClass = NodeHelper.getNodeClass(this.draggedNodeType);\r\n    if (cssClass !== \"\") {\r\n      if (\r\n        currentElement &&\r\n        NodeHelper.isNode(currentElement) &&\r\n        !NodeHelper.isStartNode(currentElement) &&\r\n        !NodeHelper.isDestinationNode(currentElement)\r\n      ) {\r\n        element = currentElement;\r\n      }\r\n      element.classList.add(cssClass);\r\n      element.setAttribute(\"draggable\", \"true\");\r\n    }\r\n\r\n    this.draggedNodeType = enums.NodeType.None;\r\n  };\r\n}\r\n\r\nexport default Stage;\r\n","import React from \"react\";\nimport Stage from \"./components/stage/stage\";\n\nfunction App() {\n  return <Stage />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}